{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","Default","sortField","setSortField","isReversed","setIsReversed","visibleGoods","goods","preparedGoods","sort","good1","good2","Alphabet","localeCompare","Length","length","reverse","getPreparedGoods","className","onClick","type","cn","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAuBKA,E,0EAlBQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAQGD,O,qBAAAA,I,uBAAAA,I,oBAAAA,M,KAgCE,IAAME,EAAgB,WAC3B,MAAkCC,mBAASH,EAASI,SAApD,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAoCH,oBAAS,GAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KACMC,EA7BR,SAA0BC,EAA1B,GAC0C,IAAtCL,EAAqC,EAArCA,UAAWE,EAA0B,EAA1BA,WACPI,EAAa,YAAOD,GAqB1B,OAnBIL,IAAcL,EAASI,SACzBO,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQT,GACN,KAAKL,EAASe,SACZ,OAAOF,EAAMG,cAAcF,GAE7B,KAAKd,EAASiB,OACZ,OAAOJ,EAAMK,OAASJ,EAAMI,OAE9B,QACE,OAAO,MAKXX,GACFI,EAAcQ,UAGTR,EAMcS,CAAiBnB,EAAiB,CACrDI,YACAE,eAGF,OACE,sBAAKc,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,QAAS,kBAAMhB,EAAaN,EAASe,WACrCQ,KAAK,SACLF,UACEG,IACE,iBACA,CAAE,WAAYnB,IAAcL,EAASe,WAN3C,iCAaA,wBACEO,QAAS,kBAAMhB,EAAaN,EAASiB,SACrCM,KAAK,SACLF,UACEG,IACE,oBACA,CAAE,WAAYnB,IAAcL,EAASiB,SAN3C,4BAaA,wBACEK,QAAS,kBAAMd,GAAeD,IAC9BgB,KAAK,SACLF,UAAWG,IACT,oBACA,CAAE,YAAajB,IALnB,sBAWEA,GAAcF,IAAcL,EAASI,UACrC,wBACEkB,QAAS,WACPhB,EAAaN,EAASI,SACtBI,GAAc,IAEhBe,KAAK,SACLF,UAAU,4BANZ,sBAaJ,6BACE,6BACGZ,EAAagB,KAAI,SAAAC,GAAI,OACpB,oBAAe,UAAQ,OAAvB,SACGA,GADMA,cCrHrBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.c09f26e4.chunk.js","sourcesContent":["import { useState } from 'react';\nimport cn from 'classnames';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\ninterface SortParams {\n  sortField: SortType;\n  isReversed: boolean;\n}\n\nenum SortType {\n  Default,\n  Alphabet,\n  Length,\n}\n\nfunction getPreparedGoods(goods: string[],\n  { sortField, isReversed }: SortParams) {\n  const preparedGoods = [...goods];\n\n  if (sortField !== SortType.Default) {\n    preparedGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SortType.Alphabet:\n          return good1.localeCompare(good2);\n\n        case SortType.Length:\n          return good1.length - good2.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isReversed) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortField, setSortField] = useState(SortType.Default);\n  const [isReversed, setIsReversed] = useState(false);\n  const visibleGoods = getPreparedGoods(goodsFromServer, {\n    sortField,\n    isReversed,\n  });\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          onClick={() => setSortField(SortType.Alphabet)}\n          type=\"button\"\n          className={\n            cn(\n              'button is-info',\n              { 'is-light': sortField !== SortType.Alphabet },\n            )\n          }\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          onClick={() => setSortField(SortType.Length)}\n          type=\"button\"\n          className={\n            cn(\n              'button is-success',\n              { 'is-light': sortField !== SortType.Length },\n            )\n          }\n        >\n          Sort by length\n        </button>\n\n        <button\n          onClick={() => setIsReversed(!isReversed)}\n          type=\"button\"\n          className={cn(\n            'button is-warning',\n            { 'is-light': !isReversed },\n          )}\n        >\n          Reverse\n        </button>\n\n        {(isReversed || sortField !== SortType.Default) && (\n          <button\n            onClick={() => {\n              setSortField(SortType.Default);\n              setIsReversed(false);\n            }}\n            type=\"button\"\n            className=\"button is-danger is-light\"\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        <ul>\n          {visibleGoods.map(good => (\n            <li key={good} data-cy=\"Good\">\n              {good}\n            </li>\n          ))}\n        </ul>\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}